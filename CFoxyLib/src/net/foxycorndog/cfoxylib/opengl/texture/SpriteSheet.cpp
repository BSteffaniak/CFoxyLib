#include "../../CFL.h"

/**
 * Create a SpriteSheet from the File at the specified location with
 * the specified amount of columns and rows.
 * 
 * @param location The location of the Image File containing the
 * 		SpriteSheet.
 * @param cols The number of columns in the SpriteSheet.
 * @param rows The number of rows in the SpriteSheet.
 * @throws IOException Thrown if there is an error reading from the
 * 		Image File at the specified location.
 */
SpriteSheet::SpriteSheet(string location, int cols, int rows) : Texture(location)
{
	this->cols = cols;
	this->rows = rows;
}

/**
 * Free any of the dangling memory created by the SpriteSheet class.
 */
SpriteSheet::~SpriteSheet()
{
	quit();
}

/**
 * Get the float offsets of the SpriteSheet for the section of the
 * SpriteSheet located at (x, y) and that takes up the specified
 * amount of columns and rows.
 * 
 * @param dest The destination float array to put the values in.
 * 		The size of the array must be >= (4).
 * @param x The horizontal location to get the offsets from.
 * 		(left = 0)
 * @param y The vertical location to get the offsets from.
 * 		(top = 0)
 * @param cols The number of columns to get the offsets for.
 * @param rows The number of rows to get the offsets for.
 * @return A float array containing values used to map a Texture
 * 		to a polygon.
 */
void SpriteSheet::getImageOffsets(float *dest, int x, int y, int cols, int rows)
{
	float xo = float(x % this->cols);
	float yo = float(y % this->rows);
	
	float w = 1;
	float h = 1;
	
	dest[0] = (xo / this->cols) * w;
	dest[1] = (yo / this->rows) * h;
	dest[2] = ((xo + (float)cols) / this->cols) * w;
	dest[3] = ((yo + (float)rows) / this->rows) * h;
}

/**
 * Get the float offsets of the SpriteSheet for the section of the
 * SpriteSheet located at (x, y) and that takes up the specified
 * amount of columns and rows.
 * 
 * @param x The horizontal location to get the offsets from.
 * 		(left = 0)
 * @param y The vertical location to get the offsets from.
 * 		(top = 0)
 * @param cols The number of columns to get the offsets for.
 * @param rows The number of rows to get the offsets for.
 * @return A float array containing the values for the offsets of
 * 		the Texture.
 */
float* SpriteSheet::getImageOffsets(int x, int y, int cols, int rows)
{
	float *dest = new float[4];

	getImageOffsets(dest, x, y, cols, rows);

	addOffsets(dest);

	return dest;
}

/**
 * Get the number of columns that are in the SpriteSheet.
 * 
 * @return The number of columns that are in the SpriteSheet.
 */
int SpriteSheet::getNumCols()
{
	return cols;
}

/**
 * Get the number of rows that are in the SpriteSheet.
 * 
 * @return The number of rows that are in the SpriteSheet.
 */
int SpriteSheet::getNumRows()
{
	return rows;
}

/**
 * Get the number of pixels that each column takes up on the
 * SpriteSheet.
 * 
 * @return The number of pixels that each column takes up on the
 * 		SpriteSheet.
 */
int SpriteSheet::getColSize()
{
	return getWidth() / cols;
}

/**
 * Get the number of pixels that each row takes up on the
 * SpriteSheet.
 * 
 * @return The number of pixels that each row takes up on the
 * 		SpriteSheet.
 */
int SpriteSheet::getRowSize()
{
	return getHeight() / rows;
}

/**
 * Add the pointer array that contains the offsets generated by a call
 * to genImageOffsets(int, int, int, int) to a vector of pointers to
 * be deleted at the end of the program.
 */
void SpriteSheet::addOffsets(float *offsets)
{
	this->offsets.push_back(offsets);
}

/**
 * Free any of the dangling memory created by the SpriteSheet class.
 */
void SpriteSheet::quit()
{
	for (int i = (int)offsets.size() - 1; i >= 0; i--)
	{
		delete[] offsets[i];

		offsets[i] = NULL;
	}
}